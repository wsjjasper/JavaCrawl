import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.regex.*;
import java.util.stream.Collectors;

public class ProcedureScanner {
    private static final Pattern CALL_PATTERN = Pattern.compile("\\bCALL\\s+CRDW\\.([a-zA-Z0-9_]+)\\b", Pattern.CASE_INSENSITIVE);

    public static Map<String, Set<String>> scanProcedures(String folderPath, List<String> procedureNames) throws IOException {
        Map<String, String> sqlFiles = loadSqlFiles(folderPath);
        Map<String, Set<String>> procedureCalls = new HashMap<>();
        
        for (String procedure : procedureNames) {
            if (sqlFiles.containsKey(procedure)) {
                Set<String> nestedCalls = findNestedProcedures(sqlFiles.get(procedure), sqlFiles.keySet());
                procedureCalls.put(procedure, nestedCalls);
            }
        }
        return procedureCalls;
    }

    private static Map<String, String> loadSqlFiles(String folderPath) throws IOException {
        Map<String, String> sqlFiles = new HashMap<>();
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(folderPath), "*.sql")) {
            for (Path path : stream) {
                String procedureName = path.getFileName().toString().replace(".sql", "");
                String content = Files.readString(path);
                sqlFiles.put(procedureName, content);
            }
        }
        return sqlFiles;
    }

    private static Set<String> findNestedProcedures(String sqlContent, Set<String> knownProcedures) {
        Set<String> nestedProcedures = new HashSet<>();
        Matcher matcher = CALL_PATTERN.matcher(sqlContent);
        while (matcher.find()) {
            String calledProcedure = matcher.group(1);
            if (knownProcedures.contains(calledProcedure)) {
                nestedProcedures.add(calledProcedure);
            }
        }
        return nestedProcedures;
    }

    public static void main(String[] args) throws IOException {
        String folderPath = "path/to/sql/folder"; // Change to actual path
        List<String> procedureNames = Arrays.asList("sp_123", "sp_456"); // Example procedures

        Map<String, Set<String>> result = scanProcedures(folderPath, procedureNames);
        result.forEach((proc, calls) -> {
            System.out.println("Procedure: " + proc + " calls " + calls);
        });
    }
}
